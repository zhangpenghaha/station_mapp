<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1568706206247" stop="1568706233608">
  <name>testCase.test_test111</name>
  <labels/>
  <test-cases>
    <test-case start="1568706206247" status="failed" stop="1568706233608">
      <name>Test_意见反馈.test_提交意见反馈</name>
      <failure>
        <message>TypeError: test_提交意见反馈() missing 1 required positional argument: 'args'</message>
        <stack-trace>self = &lt;unittest.case._Outcome object at 0x0000027735BD9C18&gt;, test_case = &lt;testCase.test_test111.Test_意见反馈 testMethod=test_提交意见反馈&gt;, isTest = True

    @contextlib.contextmanager
    def testPartExecutor(self, test_case, isTest=False):
        old_success = self.success
        self.success = True
        try:
&gt;           yield

f:\python_1\lib\unittest\case.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;testCase.test_test111.Test_意见反馈 testMethod=test_提交意见反馈&gt;, result = &lt;TestCaseFunction 'test_提交意见反馈'&gt;

    def run(self, result=None):
        orig_result = result
        if result is None:
            result = self.defaultTestResult()
            startTestRun = getattr(result, 'startTestRun', None)
            if startTestRun is not None:
                startTestRun()
    
        result.startTest(self)
    
        testMethod = getattr(self, self._testMethodName)
        if (getattr(self.__class__, "__unittest_skip__", False) or
            getattr(testMethod, "__unittest_skip__", False)):
            # If the class or method was skipped.
            try:
                skip_why = (getattr(self.__class__, '__unittest_skip_why__', '')
                            or getattr(testMethod, '__unittest_skip_why__', ''))
                self._addSkip(result, self, skip_why)
            finally:
                result.stopTest(self)
            return
        expecting_failure_method = getattr(testMethod,
                                           "__unittest_expecting_failure__", False)
        expecting_failure_class = getattr(self,
                                          "__unittest_expecting_failure__", False)
        expecting_failure = expecting_failure_class or expecting_failure_method
        outcome = _Outcome(result)
        try:
            self._outcome = outcome
    
            with outcome.testPartExecutor(self):
                self.setUp()
            if outcome.success:
                outcome.expecting_failure = expecting_failure
                with outcome.testPartExecutor(self, isTest=True):
&gt;                   testMethod()
E                   TypeError: test_提交意见反馈() missing 1 required positional argument: 'args'

f:\python_1\lib\unittest\case.py:605: TypeError</stack-trace>
      </failure>
      <attachments>
        <attachment source="0fba6cd5-45e0-4d02-b5a2-17b8c2cb49e5-attachment.txt" title="Captured log setup" type="text/plain"/>
        <attachment source="b4106ae2-294d-4350-aac5-245c24cfaece-attachment.txt" title="Captured log call" type="text/plain"/>
        <attachment source="d0b2239a-15c9-4094-bafb-7ddb0a8953e1-attachment.txt" title="Captured log setup" type="text/plain"/>
        <attachment source="1d2c921d-4f80-47b6-a78c-8e62345e2e74-attachment.txt" title="Captured log call" type="text/plain"/>
        <attachment source="32215420-2ac4-4620-87b0-db4aa215e1ef-attachment.txt" title="Captured log setup" type="text/plain"/>
        <attachment source="c1690d5d-cbb7-40d9-9789-da4067dde695-attachment.txt" title="Captured log call" type="text/plain"/>
      </attachments>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="5348-MainThread"/>
        <label name="host" value="WIN-NPMSMCDMRF4"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
